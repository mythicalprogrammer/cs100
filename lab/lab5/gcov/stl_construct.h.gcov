        -:    0:Source:/usr/lib/gcc/i386-redhat-linux/4.1.2/../../../../include/c++/4.1.2/bits/stl_construct.h
        -:    0:Graph:xmpl.gcno
        -:    0:Data:xmpl.gcda
        -:    0:Runs:6
        -:    0:Programs:1
        -:    1:// nonstandard construct and destroy functions -*- C++ -*-
        -:    2:
        -:    3:// Copyright (C) 2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.
        -:    4://
        -:    5:// This file is part of the GNU ISO C++ Library.  This library is free
        -:    6:// software; you can redistribute it and/or modify it under the
        -:    7:// terms of the GNU General Public License as published by the
        -:    8:// Free Software Foundation; either version 2, or (at your option)
        -:    9:// any later version.
        -:   10:
        -:   11:// This library is distributed in the hope that it will be useful,
        -:   12:// but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   13:// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   14:// GNU General Public License for more details.
        -:   15:
        -:   16:// You should have received a copy of the GNU General Public License along
        -:   17:// with this library; see the file COPYING.  If not, write to the Free
        -:   18:// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,
        -:   19:// USA.
        -:   20:
        -:   21:// As a special exception, you may use this file as part of a free software
        -:   22:// library without restriction.  Specifically, if other files instantiate
        -:   23:// templates or use macros or inline functions from this file, or you compile
        -:   24:// this file and link it with other files to produce an executable, this
        -:   25:// file does not by itself cause the resulting executable to be covered by
        -:   26:// the GNU General Public License.  This exception does not however
        -:   27:// invalidate any other reasons why the executable file might be covered by
        -:   28:// the GNU General Public License.
        -:   29:
        -:   30:/*
        -:   31: *
        -:   32: * Copyright (c) 1994
        -:   33: * Hewlett-Packard Company
        -:   34: *
        -:   35: * Permission to use, copy, modify, distribute and sell this software
        -:   36: * and its documentation for any purpose is hereby granted without fee,
        -:   37: * provided that the above copyright notice appear in all copies and
        -:   38: * that both that copyright notice and this permission notice appear
        -:   39: * in supporting documentation.  Hewlett-Packard Company makes no
        -:   40: * representations about the suitability of this software for any
        -:   41: * purpose.  It is provided "as is" without express or implied warranty.
        -:   42: *
        -:   43: *
        -:   44: * Copyright (c) 1996,1997
        -:   45: * Silicon Graphics Computer Systems, Inc.
        -:   46: *
        -:   47: * Permission to use, copy, modify, distribute and sell this software
        -:   48: * and its documentation for any purpose is hereby granted without fee,
        -:   49: * provided that the above copyright notice appear in all copies and
        -:   50: * that both that copyright notice and this permission notice appear
        -:   51: * in supporting documentation.  Silicon Graphics makes no
        -:   52: * representations about the suitability of this software for any
        -:   53: * purpose.  It is provided "as is" without express or implied warranty.
        -:   54: */
        -:   55:
        -:   56:/** @file stl_construct.h
        -:   57: *  This is an internal header file, included by other library headers.
        -:   58: *  You should not attempt to use it directly.
        -:   59: */
        -:   60:
        -:   61:#ifndef _STL_CONSTRUCT_H
        -:   62:#define _STL_CONSTRUCT_H 1
        -:   63:
        -:   64:#include <bits/cpp_type_traits.h>
        -:   65:#include <new>
        -:   66:
        -:   67:namespace std
        -:   68:{
        -:   69:  /**
        -:   70:   * @if maint
        -:   71:   * Constructs an object in existing memory by invoking an allocated
        -:   72:   * object's constructor with an initializer.
        -:   73:   * @endif
        -:   74:   */
        -:   75:  template<typename _T1, typename _T2>
        -:   76:    inline void
       96:   77:    _Construct(_T1* __p, const _T2& __value)
        -:   78:    {
        -:   79:      // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:   80:      // 402. wrong new expression in [some_]allocator::construct
       96:   81:      ::new(static_cast<void*>(__p)) _T1(__value);
        -:   82:    }
        -:   83:
        -:   84:  /**
        -:   85:   * @if maint
        -:   86:   * Constructs an object in existing memory by invoking an allocated
        -:   87:   * object's default constructor (no initializers).
        -:   88:   * @endif
        -:   89:   */
        -:   90:  template<typename _T1>
        -:   91:    inline void
        -:   92:    _Construct(_T1* __p)
        -:   93:    {
        -:   94:      // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:   95:      // 402. wrong new expression in [some_]allocator::construct
        -:   96:      ::new(static_cast<void*>(__p)) _T1();
        -:   97:    }
        -:   98:
        -:   99:  /**
        -:  100:   * @if maint
        -:  101:   * Destroy the object pointed to by a pointer type.
        -:  102:   * @endif
        -:  103:   */
        -:  104:  template<typename _Tp>
        -:  105:    inline void
       96:  106:    _Destroy(_Tp* __pointer)
       96:  107:    { __pointer->~_Tp(); }
        -:  108:
        -:  109:  /**
        -:  110:   * @if maint
        -:  111:   * Destroy a range of objects with nontrivial destructors.
        -:  112:   *
        -:  113:   * This is a helper function used only by _Destroy().
        -:  114:   * @endif
        -:  115:   */
        -:  116:  template<typename _ForwardIterator>
        -:  117:    inline void
        -:  118:    __destroy_aux(_ForwardIterator __first, _ForwardIterator __last,
        6:  119:		  __false_type)
        -:  120:    {
      102:  121:      for (; __first != __last; ++__first)
      102:  122:	std::_Destroy(&*__first);
        -:  123:    }
        -:  124:
        -:  125:  /**
        -:  126:   * @if maint
        -:  127:   * Destroy a range of objects with trivial destructors.  Since the destructors
        -:  128:   * are trivial, there's nothing to do and hopefully this function will be
        -:  129:   * entirely optimized away.
        -:  130:   *
        -:  131:   * This is a helper function used only by _Destroy().
        -:  132:   * @endif
        -:  133:   */
        -:  134:  template<typename _ForwardIterator>
        -:  135:    inline void
        -:  136:    __destroy_aux(_ForwardIterator, _ForwardIterator, __true_type)
        -:  137:    { }
        -:  138:
        -:  139:  /**
        -:  140:   * @if maint
        -:  141:   * Destroy a range of objects.  If the value_type of the object has
        -:  142:   * a trivial destructor, the compiler should optimize all of this
        -:  143:   * away, otherwise the objects' destructors must be invoked.
        -:  144:   * @endif
        -:  145:   */
        -:  146:  template<typename _ForwardIterator>
        -:  147:    inline void
        6:  148:    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
        -:  149:    {
        -:  150:      typedef typename iterator_traits<_ForwardIterator>::value_type
        -:  151:                       _Value_type;
        -:  152:      typedef typename std::__is_scalar<_Value_type>::__type
        -:  153:	               _Has_trivial_destructor;
        -:  154:
        6:  155:      std::__destroy_aux(__first, __last, _Has_trivial_destructor());
        -:  156:    }
        -:  157:
        -:  158:  /**
        -:  159:   * @if maint
        -:  160:   * Destroy a range of objects using the supplied allocator.  For
        -:  161:   * nondefault allocators we do not optimize away invocation of 
        -:  162:   * destroy() even if _Tp has a trivial destructor.
        -:  163:   * @endif
        -:  164:   */
        -:  165:
        -:  166:  template <typename _Tp> class allocator;
        -:  167:
        -:  168:  template<typename _ForwardIterator, typename _Allocator>
        -:  169:    void
        -:  170:    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
        -:  171:	     _Allocator __alloc)
        -:  172:    {
        -:  173:      for (; __first != __last; ++__first)
        -:  174:	__alloc.destroy(&*__first);
        -:  175:    }
        -:  176:
        -:  177:  template<typename _ForwardIterator, typename _Tp>
        -:  178:    inline void
        -:  179:    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
        6:  180:	     allocator<_Tp>)
        -:  181:    {
        6:  182:      _Destroy(__first, __last);
        -:  183:    }
        -:  184:   
        -:  185:
        -:  186:} // namespace std
        -:  187:
        -:  188:#endif /* _STL_CONSTRUCT_H */
        -:  189:
