        -:    0:Source:/usr/lib/gcc/i386-redhat-linux/4.1.2/../../../../include/c++/4.1.2/ext/new_allocator.h
        -:    0:Graph:xmpl.gcno
        -:    0:Data:xmpl.gcda
        -:    0:Runs:6
        -:    0:Programs:1
        -:    1:// Allocator that wraps operator new -*- C++ -*-
        -:    2:
        -:    3:// Copyright (C) 2001, 2002, 2003, 2004 Free Software Foundation, Inc.
        -:    4://
        -:    5:// This file is part of the GNU ISO C++ Library.  This library is free
        -:    6:// software; you can redistribute it and/or modify it under the
        -:    7:// terms of the GNU General Public License as published by the
        -:    8:// Free Software Foundation; either version 2, or (at your option)
        -:    9:// any later version.
        -:   10:
        -:   11:// This library is distributed in the hope that it will be useful,
        -:   12:// but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   13:// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   14:// GNU General Public License for more details.
        -:   15:
        -:   16:// You should have received a copy of the GNU General Public License along
        -:   17:// with this library; see the file COPYING.  If not, write to the Free
        -:   18:// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,
        -:   19:// USA.
        -:   20:
        -:   21:// As a special exception, you may use this file as part of a free software
        -:   22:// library without restriction.  Specifically, if other files instantiate
        -:   23:// templates or use macros or inline functions from this file, or you compile
        -:   24:// this file and link it with other files to produce an executable, this
        -:   25:// file does not by itself cause the resulting executable to be covered by
        -:   26:// the GNU General Public License.  This exception does not however
        -:   27:// invalidate any other reasons why the executable file might be covered by
        -:   28:// the GNU General Public License.
        -:   29:
        -:   30:/** @file ext/new_allocator.h
        -:   31: *  This file is a GNU extension to the Standard C++ Library.
        -:   32: */
        -:   33:
        -:   34:#ifndef _NEW_ALLOCATOR_H
        -:   35:#define _NEW_ALLOCATOR_H 1
        -:   36:
        -:   37:#include <new>
        -:   38:#include <bits/functexcept.h>
        -:   39:
        -:   40:namespace __gnu_cxx
        -:   41:{
        -:   42:  /**
        -:   43:   *  @brief  An allocator that uses global new, as per [20.4].
        -:   44:   *
        -:   45:   *  This is precisely the allocator defined in the C++ Standard. 
        -:   46:   *    - all allocation calls operator new
        -:   47:   *    - all deallocation calls operator delete
        -:   48:   */
        -:   49:  template<typename _Tp>
        -:   50:    class new_allocator
        -:   51:    {
        -:   52:    public:
        -:   53:      typedef size_t     size_type;
        -:   54:      typedef ptrdiff_t  difference_type;
        -:   55:      typedef _Tp*       pointer;
        -:   56:      typedef const _Tp* const_pointer;
        -:   57:      typedef _Tp&       reference;
        -:   58:      typedef const _Tp& const_reference;
        -:   59:      typedef _Tp        value_type;
        -:   60:
        -:   61:      template<typename _Tp1>
        -:   62:        struct rebind
        -:   63:        { typedef new_allocator<_Tp1> other; };
        -:   64:
        6:   65:      new_allocator() throw() { }
        -:   66:
       18:   67:      new_allocator(const new_allocator&) throw() { }
        -:   68:
        -:   69:      template<typename _Tp1>
        -:   70:        new_allocator(const new_allocator<_Tp1>&) throw() { }
        -:   71:
       24:   72:      ~new_allocator() throw() { }
        -:   73:
        -:   74:      pointer
        -:   75:      address(reference __x) const { return &__x; }
        -:   76:
        -:   77:      const_pointer
        -:   78:      address(const_reference __x) const { return &__x; }
        -:   79:
        -:   80:      // NB: __n is permitted to be 0.  The C++ standard says nothing
        -:   81:      // about what the return value is when __n == 0.
        -:   82:      pointer
        6:   83:      allocate(size_type __n, const void* = 0)
        -:   84:      { 
        6:   85:	if (__builtin_expect(__n > this->max_size(), false))
    #####:   86:	  std::__throw_bad_alloc();
        -:   87:
        6:   88:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        -:   89:      }
        -:   90:
        -:   91:      // __p is not permitted to be a null pointer.
        -:   92:      void
        6:   93:      deallocate(pointer __p, size_type)
        6:   94:      { ::operator delete(__p); }
        -:   95:
        -:   96:      size_type
        6:   97:      max_size() const throw() 
        6:   98:      { return size_t(-1) / sizeof(_Tp); }
        -:   99:
        -:  100:      // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  101:      // 402. wrong new expression in [some_] allocator::construct
        -:  102:      void 
        -:  103:      construct(pointer __p, const _Tp& __val) 
        -:  104:      { ::new(__p) _Tp(__val); }
        -:  105:
        -:  106:      void 
        -:  107:      destroy(pointer __p) { __p->~_Tp(); }
        -:  108:    };
        -:  109:
        -:  110:  template<typename _Tp>
        -:  111:    inline bool
        -:  112:    operator==(const new_allocator<_Tp>&, const new_allocator<_Tp>&)
        -:  113:    { return true; }
        -:  114:  
        -:  115:  template<typename _Tp>
        -:  116:    inline bool
        -:  117:    operator!=(const new_allocator<_Tp>&, const new_allocator<_Tp>&)
        -:  118:    { return false; }
        -:  119:} // namespace __gnu_cxx
        -:  120:
        -:  121:#endif
