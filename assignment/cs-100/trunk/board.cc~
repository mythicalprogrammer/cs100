// Course:            CS 100
// Group:             Deviant Programmers
// Lecture Section:   1
// Lab time:					Friday 11-2 pm
// Date completed:    4/28/08
// Names:             Jay Novilla
//                    Quoc Doan
//                    Keith Ailshie
//                    Nguyen Do
// ID Number:         Jay Novilla:860802932
//                    Quoc Doan:860759993
//                    Keith Ailshie:860816418
//                    Nguyen Do:860734448
// Login:             jnovilla
//                    qdoan
//                    ndo
//                    kailshie
// Project:						2
// =======================================================================**


#include <string>
#include <cstring>
#include <vector>
#include <fstream>
#include <ostream>
#include "gate.h"
#include "wire.h"
#include "AND.h"
#include "OR.h"
#include "NOT.h"
#include "board.h"
#include "object.h"
#include <math.h>
#include <iostream>

using namespace std;

Board::Board() : inputFile(""), inputWireVector(), outputWireVector(),
		             gateVector(), disable(false)
{
}

Board::Board(string inputString) : inputFile(""), inputWireVector(), 
				                           outputWireVector(), gateVector(), disable(false)
{
  inputFile=inputString;
}

Board::~Board()
{
  unsigned int count=0;

  while(count < outputWireVector.size() || count < inputWireVector.size() || 
        count < gateVector.size())
  {
    if(count < outputWireVector.size())
    {
      delete outputWireVector[count];
    }
      
    if(count < inputWireVector.size())
    {
      delete inputWireVector[count];
    }
    
    if(count < gateVector.size())
    {
      delete gateVector[count];
    }
    
    count++;
  }   
}

void Board::setFile(string inputString)
{
  inputFile=inputString;
}


void Board::Parse()
{
  ifstream inputStream;
  inputStream.open(inputFile.c_str());

  if(!inputStream)
  {
    cout << "incorrect input/output file"
         << endl;
    exit(0);
  }

  string inputString,
         inputString_2, 
         inputString_3,
         inputString_4,
         junkEater,
         tester;
         
  unsigned int countWire=0;
  unsigned int countGate=0;
  unsigned int countGate_2=0;
  int junkNumber=0;

  while(!inputStream.eof())
	{
	  inputStream >> inputString;
	  
	  //removes comments
	  if(inputString=="#")
		{
		  getline(inputStream,inputString); 
		}	
		else
		{
		  if(inputString.substr(inputString.size()-1,1)==":")
			{
			  inputStream >> inputString_2;
			  
				//in the case of input and output wires
				if(strcasecmp(inputString_2.c_str(),"IN")==0 or 
				   strcasecmp(inputString_2.c_str(),"OUT")==0)
				{
				  //for input wires it creates one
					if(strcasecmp(inputString_2.c_str(),"IN")==0)
					{
					  Wire * incomingWire=new Wire(inputString.substr(0,1),"external");	
					  inputWireVector.push_back(incomingWire);
					}
					else// for output wires it creates one
					{
					  Wire * incomingWire=new Wire(inputString.substr(0,1),"external");	
					  outputWireVector.push_back(incomingWire);
					}
				}
				
				//for the gates
				else if(strcasecmp(inputString_2.c_str(),"AND")==0 or 
					      strcasecmp(inputString_2.c_str(),"NOT")==0 or 
					      strcasecmp(inputString_2.c_str(),"OR")==0)
				{  
				  //for the AND gate
					if(strcasecmp(inputString_2.c_str(),"AND")==0)
					{
					  AND * incomingGate=new AND(inputString.substr(0,1));	
					  gateVector.push_back(incomingGate);
					}
					//for the OR gate
					else if(strcasecmp(inputString_2.c_str(),"OR")==0)
					{
					  OR * incomingGate=new OR(inputString.substr(0,1));	
					  gateVector.push_back(incomingGate);
					}
					else
					//for the NOT gate
					{
					  NOT * incomingGate=new NOT(inputString.substr(0,1));	
					  gateVector.push_back(incomingGate);
					}   
			  }
			  
				//the word wire indicates its binding things together
				// the second word is Wire
				else if(strcasecmp(inputString_2.c_str(),"WIRE")==0)
				{
				  inputStream >> inputString_3; 
					
					// means its an input wire     
					if(inputString_3.size()==1)
					{ 
					  countWire=0;
					  countGate=0;
            
/*          
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////            
*/                             
            /*Post-condition DBC*/
            if(!disable)
            {                
              ENSURE(inputWireVector[0]->get_name()!="");
            }
            
					  tester=inputWireVector[0]->get_name();
					       
					  //finds the wire it needs
					  while(strcasecmp(tester.c_str(),inputString_3.c_str())!=0)
					  {
					    countWire++;
              
/*            
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
              
*/            
              /*Pre-condition DBC*/  
              if(!disable)
              {              
                REQUIRE(countWire < inputWireVector.size());
                
                /*Post-condition DBC*/                
                ENSURE(inputWireVector[countWire]->get_name()!="");
              }
              
					    tester=inputWireVector[countWire]->get_name();
					  }
					  
					  inputStream >> junkEater >> inputString_4;
					  countGate=0;
            
/*          
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
            
*/          
            
            /*Post-condition DBC*/
            if(!disable)
            {                
              ENSURE(gateVector[0]->get_gateName()!="");
            }
            
					  tester=gateVector[0]->get_gateName();
					       
					  //finds the gate its looking for
					  while(strcasecmp(tester.c_str(),inputString_4.substr(0,1).c_str())!=0)
					  {
					    countGate++;
              
/*            
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
              
*/            
              /*Pre-condition DBC*/
              if(!disable)
              {                
                REQUIRE(countGate < gateVector.size());
                
                /*Post-condition DBC*/                
                ENSURE(gateVector[countGate]->get_gateName()!="");
              }
              
					    tester=gateVector[countGate]->get_gateName();
					  }
					  
					  junkNumber=atoi(inputString_4.substr(inputString_4.size()-2,1).c_str());
					       
/*          
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
            
*/          
            
            /*Pre-condition DBC*/  
            if(!disable)
            {              
              REQUIRE(countGate < gateVector.size());
            }
            
					  inputWireVector[countWire]->set_destinationGate(gateVector[countGate]);
					  //binds the wire to the first input of the gate
					  if(junkNumber==0)
					  {  
              
/*            
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
              
*/            
              /*Pre-condition DBC*/  
              if(!disable)
              {              
                REQUIRE(countWire < inputWireVector.size());
              }
              
					    gateVector[countGate]->setWireZero(inputWireVector[countWire]);
					        
					  }    
					  // binds the wire to the second input of the gate 
					  else
					  {
              
/*            
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
              
*/            
              /*Pre-condition DBC*/
              if(!disable)
              {                
                REQUIRE(countWire < inputWireVector.size());
              }
              
					    gateVector[countGate]->setWireOne(inputWireVector[countWire]);
					  }     
					}
					
				  //indicates its an output of somekind- either internal or external
					else if(inputString_3.substr(inputString_3.size()-1,1)==")")
					{
					  countWire=0;
					  countGate=0;
					  countGate_2=0;
					  inputStream >> junkEater >> inputString_4;
					       
					  //for internal wires only
					  if(inputString_4.substr(inputString_4.size()-1,1)==")")
					  // means its an input of a gate
					  //internal wires
					  {
              
              
/*            
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
              
*/

               /*Post-condition DBC*/ 
               if(!disable)
               {               
                 ENSURE(gateVector[0]->get_gateName()!=""); 
                                                   }
					       tester=gateVector[0]->get_gateName();
					       while(strcasecmp(tester.c_str(),inputString_3.substr(0,1).c_str())!=0)
					       {
					         countGate++;

/*
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////

*/
                  /*Pre-condition DBC*/
                    if(!disable)
                    {                
                      REQUIRE(countGate < gateVector.size());

                      /*Post-condition DBC*/                
                      ENSURE(gateVector[countGate]->get_gateName()!="");
                    }
					        tester=gateVector[countGate]->get_gateName();
					       }

/*
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////

*/
               /*Post-condition DBC*/
               if(!disable)
               {                
                 ENSURE(gateVector[0]->get_gateName()!="");
               }
					       tester=gateVector[0]->get_gateName();
					     while(strcasecmp(tester.c_str(),inputString_4.substr(0,1).c_str())!=0)
					     {
					       countGate_2++; 

/*
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////

*/
                 /*Pre-condition DBC*/
                 if(!disable)
                 {                
                   REQUIRE(countGate_2 < gateVector.size());

                   /*Post-condition DBC*/                
                   ENSURE(gateVector[countGate_2]->get_gateName()!="");
                 }
					       tester=gateVector[countGate_2]->get_gateName();
					     }

/*
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////

*/
                /*Pre-condition DBC*/    
                if(!disable)
                {            
                  REQUIRE(countGate < gateVector.size());
                }
 	              if(!gateVector[countGate]->checkOutWire())
					      {
					        junkNumber=atoi(inputString_4.substr(inputString_4.size()-2,1).c_str());
					        Wire * internal=new Wire("internalJunk","internal");
					        inputWireVector.push_back(internal);
					        Gate * gateJunk=NULL;

/*
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////

*/
                 /*Pre-condition DBC*/
                 if(!disable)
                 {                
                    REQUIRE(countGate < gateVector.size());
                 }
					       gateVector[countGate]->setWireOut(internal);
					       gateJunk=gateVector[countGate_2];
/*
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////

*/
//???????????????????????????????????????????????????????????????
					        internal->set_destinationGate(gateJunk);
/*
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////

*/
                  /*Pre-condition DBC*/        
                 if(!disable)
                 {        
                   REQUIRE(countGate < gateVector.size());
                 }
					       internal->set_sourceGate(gateVector[countGate]);
					       if(!disable)
					       {
					         REQUIRE(gateVector[countGate_2]->get_gateName()!=gateVector[countGate]->get_gateName());
					       }
					     }
					     if(junkNumber==0)
					     {
/*
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////

*/
                /*Pre-condition DBC*/
                if(!disable)
                {                
                   REQUIRE(countGate_2 < gateVector.size());         
                   REQUIRE(countGate < gateVector.size());
                }
					         gateVector[countGate_2]->setWireZero(gateVector[countGate]->get_OutputWire());
					          
					         
					     }
               else
               {
/*
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////

*/
                   /*Pre-condition DBC*/
                   if(!disable)
                   {              
                      REQUIRE(countGate_2 < gateVector.size());         
                      REQUIRE(countGate < gateVector.size());
                   }
					            gateVector[countGate_2]->setWireOne(gateVector[countGate]->get_OutputWire());
					         }
					       }
					       else//for solely output wires of gates
					       {   

/*
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////

*/
                    /*Post-condition DBC*/
                    if(!disable)
                    {
                      REQUIRE(outputWireVector.size()>0);                
                      ENSURE(outputWireVector[0]->get_name()!="");
                    }
					            tester=outputWireVector[0]->get_name();
					           //finds the wire
					          while(strcasecmp(tester.c_str(),inputString_4.c_str())!=0)
					          {
					            countWire++;

/*
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////

*/
                     /*Pre-condition DBC*/
                     if(!disable)
                     {                
                        REQUIRE(countWire < outputWireVector.size());
                        /*Post-condition DBC*/                
                        ENSURE(outputWireVector[countWire]->get_name()!="");
                     }
					              tester=outputWireVector[countWire]->get_name();
					         }

/*
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////

*/
                    /*Post-condition DBC*/
                    if(!disable)
                    {                
                      ENSURE(gateVector[0]->get_gateName()!="");
                    }
		      tester=gateVector[0]->get_gateName();
	            //finds the gate
		    while(strcasecmp(tester.c_str(),inputString_3.substr(0,1).c_str())!=0)
	            {
		      countGate++;

/*
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////

*/
                       /*Pre-condition DBC*/                
                       if(!disable)
                       {
                         REQUIRE(countGate < gateVector.size());
                         /*Post-condition DBC*/                
                         ENSURE(gateVector[countGate]->get_gateName()!="");
                       }
		       tester=gateVector[countGate]->get_gateName();
		    }
/*
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////

*/
                    /*Pre-condition DBC*/
                    if(!disable)
                    {                
                      REQUIRE(countGate < gateVector.size());             
                      REQUIRE(countWire < outputWireVector.size());
                    }
		      gateVector[countGate]->setWireOut(outputWireVector[countWire]);
/*
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////

*/
                    /*Pre-condition DBC*/
                    if(!disable)
                    {                 
                      REQUIRE(countGate < gateVector.size());             
                      REQUIRE(countWire < outputWireVector.size());
                    }
		      outputWireVector[countWire]->set_sourceGate(gateVector[countGate]);
		  }    
	       }
	    }
	 }
	 else
         {
	   cout << "ERROR IN THE INPUT." << endl;
	   return;
	 }	
       }
     }
  inputStream.close();
}





void Board::Print(){

if(disable)
{
disableAllErrorCheck();
}
//else
//enableAllErrorCheck();

/*
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////

*/
/*Pre-condition DBC*/
if(!disable)
{                
REQUIRE(inputWireVector.size() > 0);
REQUIRE(gateVector.size() > 0);
}
if(inputWireVector.size()==0 or gateVector.size()==0 or outputWireVector.size()==0 )
{
cout << "Board is empty." << endl;
return;
}

  unsigned int count=0;
	
	
  int numberExternalWires=0;
	count=0;
	//determines how many times to output the input names based on the size of the vector
	while(count<inputWireVector.size())
	{
/*
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////

*/
          /*Pre-condition DBC*/
          if(!disable)
          {
          REQUIRE(count < inputWireVector.size());
          REQUIRE(inputWireVector[count]->get_type()=="internal" or inputWireVector[count]->get_type()=="external");
          }
	  if(inputWireVector[count]->get_type()=="external")
	  {
	  numberExternalWires++;
	  }
	  count++;
	}
	//determines the number of rows using powers 2^n
	double numberJunk=pow(2,numberExternalWires);
	int numberRows=int(numberJunk);
	vector< vector<double> > inputMatrix(numberRows,vector<double>(numberExternalWires));	
	
	count=0;
  //populates the matrix with 0's
	for(int i=0;i<numberRows;i++)
	{
	  for(int j=0; j<numberExternalWires;j++)
	  {
	    inputMatrix[i][j]=0;
	    
	  }
	  
	}
	
	
	
	
	
	
	//displays the input names
	for(int a=0; a<numberExternalWires;a++ )
	{
/*
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////

*/
    /*Pre-condition DBC*/
    if(!disable)
    {
    unsigned int bb=a;
    REQUIRE(bb < inputWireVector.size());
    REQUIRE(inputWireVector[bb]->get_type()=="internal" or inputWireVector[bb]->get_type()=="external");
    }
    if(inputWireVector[a]->get_type()!="internal")
    {
/*
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////

*/
      /*Pre-condition DBC*/
      if(!disable)
      {
      unsigned int bb=a;
      REQUIRE(bb< inputWireVector.size());
      REQUIRE(inputWireVector[bb]->get_name()!="");
      }
      cout << inputWireVector[a]->get_name() << "    ";
    }
	}
	cout << "|    ";
	//displays the output names
	for(unsigned int b=0; b<outputWireVector.size();b++ )
	{
/*
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////

*/    
      /*Pre-condition DBC*/
      if(!disable)
      {
      REQUIRE(b < outputWireVector.size());
      REQUIRE(outputWireVector[b]->get_name()!="");
      }
      cout << outputWireVector[b]->get_name() << "    ";
    
	}
		
	cout << endl;
	//the filling of the matrix
	for(int i=0;i<numberRows;i++)
	{
	  vector<int> inputNumbers;
	  Binary(i,inputNumbers);
	  
	  
	  
	  
	  
	  /*
	  if(inputNumbers.size()>2) 
	  {
	    
	    for(int j=0; j<numberExternalWires;j++)
	    {
   
	   
	      inputMatrix[i][j]=inputNumbers[j];


             
              if(!disable)
              {
              REQUIRE(i < inputMatrix.size());
              REQUIRE(j < inputMatrix[i].size());
              REQUIRE(j < inputWireVector.size());
              }
	      inputWireVector[j]->set_charge(inputMatrix[i][j]);
	     
	    
	    }
	  }
	  
	 */
	    int dumb=inputNumbers.size();
	    for(int j=numberExternalWires-1; j>=0;j--)
	    {
     
	     if(dumb>0)
	     {
	        inputMatrix[i][j]=inputNumbers[dumb-1];
	        
	        
	        dumb--;
	     } 

              
              if(!disable)
              {
              unsigned int ii=i;
              unsigned int jj=j;
              REQUIRE(ii < inputMatrix.size());
              REQUIRE(jj < inputMatrix[ii].size());
              }
	     inputWireVector[j]->set_charge(inputMatrix[i][j]);
	     
	   
	    
	    }
	    
	  
	  //}
	  //outputs the left side of the truth table
	    for(int l=0; l<numberExternalWires;l++)
	    {
   
	   
			  //inputWireVector[l]->set_charge(inputMatrix[i][l]);
	      cout << inputMatrix[i][l] << "    ";
	    
	    
	    }
	    cout << "|    ";
	    //outputs the output of the circuit simulator for each row
	    for(unsigned int k=0; k<outputWireVector.size();k++)
	  {

/*
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////

*/
              /*Pre-condition DBC*/
              if(!disable)
              {
              REQUIRE(k < outputWireVector.size());
              
              /*Post-condition DBC*/
              ENSURE(outputWireVector[k]->get_sourceGatepointer()!=NULL);
              }
	    Gate * outputGate=outputWireVector[k]->get_sourceGatepointer();
	    outputGate->gateOutput();
/*
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////

*/
              /*Pre-condition DBC*/
              if(!disable)
              {
              REQUIRE(k < outputWireVector.size());
              }
	    if(outputWireVector[k]->get_charge())
	    {
	      cout << "1";
	    }
	    else 
	    {
	    cout << "0";
	    }
	   
	  }
	  
	  
	    
	  cout << endl;
	}





}



/////////////
// this is the new print
/////////////





void Board::Print(string outputFile){
if(disable)
{
disableAllErrorCheck();
}
//else
//enableAllErrorCheck();


/*
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////

*/

/*Pre-condition DBC*/   
if(!disable)
{             
REQUIRE(inputWireVector.size() > 0);
REQUIRE(gateVector.size() > 0);
}
if(inputWireVector.size()==0 or gateVector.size()==0 or outputWireVector.size()==0)
{
cout << "Board is empty." << endl;
return;
}

   ofstream outputStream;
   outputStream.open(outputFile.c_str(),ios::app);
   if(!outputStream)
   {
   cout << "incorrect output file"
        << endl;
   return;
   
   }

	 unsigned int count=0;
	
	
  int numberExternalWires=0;
	count=0;
	//determines how many times to output the input names based on the size of the vector
	while(count<inputWireVector.size())
	{
/*
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////

*/
    /*Pre-condition DBC*/
    if(!disable)
    {
    REQUIRE(count < inputWireVector.size());
    REQUIRE(inputWireVector[count]->get_type()=="internal" or inputWireVector[count]->get_type()=="external");
    }
	  if(inputWireVector[count]->get_type()=="external")
	  {
	  numberExternalWires++;
	  }
	  count++;
	}
	//determines the number of rows using powers 2^n
	double numberJunk=pow(2,numberExternalWires);
	int numberRows=int(numberJunk);
	vector< vector<double> > inputMatrix(numberRows,vector<double>(numberExternalWires));	
	
	count=0;
  //populates the matrix with 0's
	for(int i=0;i<numberRows;i++)
	{
	  for(int j=0; j<numberExternalWires;j++)
	  {
	    inputMatrix[i][j]=0;
	    
	  }
	  
	}
	
	
	
	
	
	
	//displays the input names
	for(int a=0; a<numberExternalWires;a++ )
	{
/*
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
*/
  /*Pre-condition DBC*/
  if(!disable)
  {
    unsigned int aa=a;
    REQUIRE(aa < inputWireVector.size());
    REQUIRE(inputWireVector[aa]->get_type()=="internal" or 
            inputWireVector[aa]->get_type()=="external");
  }
  
  if(inputWireVector[a]->get_type()!="internal")
  {
/*
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
*/
    /*Pre-condition DBC*/
    if(!disable)
    {
      unsigned int aaa=a;
      REQUIRE(aaa < inputWireVector.size());
      REQUIRE(inputWireVector[aaa]->get_name()!="");
    }
      outputStream << inputWireVector[a]->get_name() << "    ";
    }
  }
  outputStream << "|    ";
  //displays the output names
  for(unsigned int b=0; b<outputWireVector.size();b++ )
  {
/*
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
*/    
    /*Pre-condition DBC*/
    if(!disable)
    {
      REQUIRE(b < inputWireVector.size());
      REQUIRE(outputWireVector[b]->get_name()!="");
    }
    
    outputStream << outputWireVector[b]->get_name() << "    ";
	}
		
	outputStream << endl;
	
	//the filling of the matrix
	for(int i=0;i<numberRows;i++)
	{
	  vector<int> inputNumbers;
	  Binary(i,inputNumbers);

	  int dumb=inputNumbers.size();
	  
	  for(int j=numberExternalWires-1; j>=0;j--)
	  {
     
	    if(dumb > 0)
	    {
	      inputMatrix[i][j]=inputNumbers[dumb-1];

	      dumb--;
      } 

      if(!disable)
      {
        unsigned int iii=i;
        unsigned int jjj=j;
        REQUIRE(iii < inputMatrix.size());
        REQUIRE(jjj < inputMatrix[iii].size());
        REQUIRE(jjj < inputWireVector.size());
      }
      inputWireVector[j]->set_charge(inputMatrix[i][j]);  
    }

	  //outputs the left side of the truth table
    for(int l=0; l<numberExternalWires;l++)
    {
      //inputWireVector[l]->set_charge(inputMatrix[i][l]);
      outputStream << inputMatrix[i][l] << "    ";
    }
	    
    outputStream << "|    ";
    //outputs the output of the circuit simulator for each row
    for( unsigned int k=0; k<outputWireVector.size();k++)
    {
/*
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
*/
      /*Pre-condition DBC*/
      if(!disable)
      {
        REQUIRE(k < outputWireVector.size());

        /*Post-condition DBC*/
        ENSURE(outputWireVector[k]->get_sourceGatepointer()!=NULL);
      }
        
      Gate* outputGate=outputWireVector[k]->get_sourceGatepointer();
      outputGate->gateOutput();

/*
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
*/
      /*Pre-condition DBC*/
      if(!disable)
      {
        REQUIRE(k < outputWireVector.size());
      }
      if(outputWireVector[k]->get_charge())
      {
        outputStream << "1";
      }
      else 
      {
        outputStream << "0";
      } 
    }  
    outputStream << endl;
  }
}

void Board::Binary(int number,vector<int> & intVector)
{
  int remainder;

  if(number <= 1) 
  {
    intVector.push_back(number);
    return;
  }

  remainder = number%2;
  Binary(number >> 1,intVector);
  intVector.push_back(remainder);
}

void Board::enableErrorCheck()
{
  disable=false;
}

void Board::disableErrorCheck()
{
  disable=true;
}

void Board::disableAllErrorCheck()
{
  unsigned int count=0;
  
  while(count < outputWireVector.size() || count < inputWireVector.size() || 
        count < gateVector.size())
  {
    if(count < outputWireVector.size())
    {
      outputWireVector[count]->disableErrorCheck();
    }  
    if(count < inputWireVector.size())
    {
      inputWireVector[count]->disableErrorCheck();
    }
    if(count < gateVector.size())
    {
      gateVector[count]->disableErrorCheck();
    }
    
    count++;
  }
}

void Board::enableAllErrorCheck()
{
  unsigned int count=0;
  
  while(count < outputWireVector.size() || count < inputWireVector.size() || 
        count < gateVector.size())
  {
    if(count < outputWireVector.size())
    {
      outputWireVector[count]->enableErrorCheck();
    }  
    if(count < inputWireVector.size())
    {
      inputWireVector[count]->enableErrorCheck();
    }
    if(count < gateVector.size())
    {
      gateVector[count]->enableErrorCheck();
    }
    
    count++;
  }
}

void Board::drawCircuit()
{
  fstream dotFile;
  
  dotFile.open("circuit.dot", fstream::out | fstream::trunc);
  
  //generate the initial dot code
  dotFile << "graph circuit \n";
  dotFile << "{\n";
    
  //generate dot code for all the gates in the gate vector
  for(unsigned int i = 0; i < gateVector.size();i++)
  { 
    
    if(gateVector[i]->get_gateType() == "AND")
    {
      dotFile << "node" << i << " [label=\"" << gateVector[i]->get_gateName() 
              << "\"]\n";
    }
    else if(gateVector[i]->get_gateType() == "OR")
    {
    
    }
  }
  
  //generate the finalizing dot code
  dotFile << "}";
  
  dotFile.close();
  system("dot -Tjpg circuit.dot -o circuit.jpg");
  system("firefox circuit.jpg &");
}
